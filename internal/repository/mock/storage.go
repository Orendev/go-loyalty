// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/storage.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/Orendev/go-loyalty/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddAccount mocks base method.
func (m *MockStorage) AddAccount(ctx context.Context, a models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccount", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccount indicates an expected call of AddAccount.
func (mr *MockStorageMockRecorder) AddAccount(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccount", reflect.TypeOf((*MockStorage)(nil).AddAccount), ctx, a)
}

// AddOrder mocks base method.
func (m *MockStorage) AddOrder(ctx context.Context, u models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockStorageMockRecorder) AddOrder(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockStorage)(nil).AddOrder), ctx, u)
}

// AddTransact mocks base method.
func (m *MockStorage) AddTransact(ctx context.Context, t models.Transact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransact", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransact indicates an expected call of AddTransact.
func (mr *MockStorageMockRecorder) AddTransact(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransact", reflect.TypeOf((*MockStorage)(nil).AddTransact), ctx, t)
}

// AddUser mocks base method.
func (m *MockStorage) AddUser(ctx context.Context, u models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockStorageMockRecorder) AddUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockStorage)(nil).AddUser), ctx, u)
}

// Close mocks base method.
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// GetAccountByUserID mocks base method.
func (m *MockStorage) GetAccountByUserID(ctx context.Context, userID string) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByUserID", ctx, userID)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByUserID indicates an expected call of GetAccountByUserID.
func (mr *MockStorageMockRecorder) GetAccountByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByUserID", reflect.TypeOf((*MockStorage)(nil).GetAccountByUserID), ctx, userID)
}

// GetCurrent mocks base method.
func (m *MockStorage) GetCurrent(ctx context.Context, accountID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrent", ctx, accountID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrent indicates an expected call of GetCurrent.
func (mr *MockStorageMockRecorder) GetCurrent(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrent", reflect.TypeOf((*MockStorage)(nil).GetCurrent), ctx, accountID)
}

// GetOrderByNumber mocks base method.
func (m *MockStorage) GetOrderByNumber(ctx context.Context, number int, userID string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByNumber", ctx, number, userID)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByNumber indicates an expected call of GetOrderByNumber.
func (mr *MockStorageMockRecorder) GetOrderByNumber(ctx, number, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByNumber", reflect.TypeOf((*MockStorage)(nil).GetOrderByNumber), ctx, number, userID)
}

// GetOrderByUserID mocks base method.
func (m *MockStorage) GetOrderByUserID(ctx context.Context, userID string, limit int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByUserID", ctx, userID, limit)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByUserID indicates an expected call of GetOrderByUserID.
func (mr *MockStorageMockRecorder) GetOrderByUserID(ctx, userID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByUserID", reflect.TypeOf((*MockStorage)(nil).GetOrderByUserID), ctx, userID, limit)
}

// GetWithdrawByAccountID mocks base method.
func (m *MockStorage) GetWithdrawByAccountID(ctx context.Context, accountID string, limit int) ([]models.Transact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawByAccountID", ctx, accountID, limit)
	ret0, _ := ret[0].([]models.Transact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawByAccountID indicates an expected call of GetWithdrawByAccountID.
func (mr *MockStorageMockRecorder) GetWithdrawByAccountID(ctx, accountID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawByAccountID", reflect.TypeOf((*MockStorage)(nil).GetWithdrawByAccountID), ctx, accountID, limit)
}

// Login mocks base method.
func (m *MockStorage) Login(ctx context.Context, login, password string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, login, password)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockStorageMockRecorder) Login(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockStorage)(nil).Login), ctx, login, password)
}

// Ping mocks base method.
func (m *MockStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorage)(nil).Ping), ctx)
}

// UpdateAccountCurrent mocks base method.
func (m *MockStorage) UpdateAccountCurrent(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountCurrent", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountCurrent indicates an expected call of UpdateAccountCurrent.
func (mr *MockStorageMockRecorder) UpdateAccountCurrent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountCurrent", reflect.TypeOf((*MockStorage)(nil).UpdateAccountCurrent), ctx, id)
}

// UpdateStatusOrder mocks base method.
func (m *MockStorage) UpdateStatusOrder(ctx context.Context, orderNumber int, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusOrder", ctx, orderNumber, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusOrder indicates an expected call of UpdateStatusOrder.
func (mr *MockStorageMockRecorder) UpdateStatusOrder(ctx, orderNumber, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusOrder", reflect.TypeOf((*MockStorage)(nil).UpdateStatusOrder), ctx, orderNumber, status)
}
